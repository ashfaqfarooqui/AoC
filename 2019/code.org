* Day 1
** read inputs


#+Name: printthis(in = inp)
#+begin_src amm

import ammonite.ops._
import
val pathInp : Path = pwd/"Code"/"AdventOfCode"/"2019"/"inputs"
val inputs = read.lines! pathInp/"day1.txt" map(_.toInt)
#+end_src

#+RESULTS: printthis(in = inp)
: (console):1:11 expected end-of-input
:  }
:           ^

** Part 1

#+begin_src amm
def fuelRequired(mass:Int)={
  (mass/3) - 2
}

inputs.map(fuelRequired _ ).sum


#+end_src

#+RESULTS:
: defined function fuelRequired
: res16_1: Int = 3234871


** Part 2
#+begin_src amm
def fuelRequiredFuel(mass:Int,acc:Int):Int={
  val f = fuelRequired(mass)
  if(f<0)
    acc
  else
    fuelRequiredFuel(f,f+acc)
}

inputs.map(x=>fuelRequiredFuel(x,0)).sum
#+end_src

#+RESULTS:
: defined function fuelRequiredFuel
: res19_1: Int = 4849444

* Day 2
** Inputs
#+begin_src amm

import ammonite.ops._

val pathInp : Path = pwd/"Code"/"AdventOfCode"/"2019"/"inputs"
val inputs = read! pathInp/"day2.txt"
val inpArray = inputs.split(",").map(_.trim).map(_.toInt)

#+end_src

#+RESULTS:
#+begin_example
import ammonite.ops._

import scala.collection.mutable.ArrayBuffer

pathInp: Path = /home/ashfaqf/Code/AdventOfCode/2019/inputs
inputs: String = """1,0,0,3,1,1,2,3,1,3,4,3,1,5,0,3,2,1,6,19,1,19,6,23,2,23,6,27,2,6,27,31,2,13,31,35,1,9,35,39,2,10,39,43,1,6,43,47,1,13,47,51,2,6,51,55,2,55,6,59,1,59,5,63,2,9,63,67,1,5,67,71,2,10,71,75,1,6,75,79,1,79,5,83,2,83,10,87,1,9,87,91,1,5,91,95,1,95,6,99,2,10,99,103,1,5,103,107,1,107,6,111,1,5,111,115,2,115,6,119,1,119,6,123,1,123,10,127,1,127,13,131,1,131,2,135,1,135,5,0,99,2,14,0,0
"""
inpArray: Array[Int] = Array(
  1,
  0,
  0,
  3,
  1,
  1,
  2,
  3,
...
#+end_example


** Part 1
#+begin_src amm
val opCtr = 0;

def processOpcode(loc:Int,arr:Array[Int]):Array[Int]={
  if(arr[loc]==99)
    arr
  else{
      arr[arr[loc+3]] = arr[loc] match {

      case 1 => arr[arr[loc+1]] + arr[arr[loc+2]]
      case 2 => arr[arr[loc+1]] * arr[arr[loc+2]]
    }
    processOpcode(loc+4,arr)
  }
}

processOpcode(0,inpArray)

#+end_src

#+RESULTS:
: (console):5: ';' expected but '=' found.
:       arr[arr[loc+3]] = arr[loc] match {
:                       ^
